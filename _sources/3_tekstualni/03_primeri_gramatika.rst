Примери контекстно слободних граматика
--------------------------------------

Пример 1
--------

И природни језици се могу описивати формалним граматикама. На пример:

::

   реченица        = проста_реченица |
                     простопроширена_реченица |
                     сложена_реченица ;
   проста_реченица = субјекат, предикат ;

   субјекат        = именица | заменица | број ;
   предикат        = глагол | "је", именица | "је", придев ;
   
   именица         = "пас" | "зец" | "Предраг" | "Аранђеловац" | "прозор" ;
   заменица        = "он" | "тај" | "онај" | "овај" ;
   број            = "један" | "први" ;
   глагол          = "пева" | "трчи" | "спава" | "лаје" | "шкрипи" ;
   придев          = "леп" | "висок" | "опасан" | "радознао" ;

.. mchoice:: gramatika_pr1_q1
    :multiple_answers:
    :answer_a: зец трчи
    :answer_b: Аранђеловац је један
    :answer_c: Предраг је прозор
    :answer_d: пас шкрипи
    :correct: a, c, d

    Које од ових реченица могу да се добију полазећи од нетерминала `проста_реченица` (означи све тачне одговоре)?
    
.. mchoice:: gramatika_pr1_q2
    :multiple_answers:
    :answer_a: један је Аранђеловац
    :answer_b: онај спава
    :answer_c: он је тај
    :answer_d: прозор је висок
    :correct: a, b, d

    Које од ових реченица могу да се добију полазећи од нетерминала `проста_реченица` (означи све тачне одговоре)?

Пример 2
--------

Размислимо како бисмо бинарно дрво могли да запишемо у неку датотеку. Један могући формат је следећи:
   
::
   
   tree(5,
        tree(3,
           tree(1,null,null),
           tree(4,null,null)
       ),
       tree(9,
           tree(6,null,null),
           tree(11,null,null)
       )
    )


Иако омогућава запис произвољних дрвета, граматика која описује овај
формат је веома једноставна и садржи само два правила.
    
::
   
    дрво = "null" ;
    дрво = "tree", "(", број, "," дрво, ",", дрво, ")" ;
    

Пример 3
--------

Програмски језици се такође описују граматикама. Наредна граматика
описује синтаксу једног минијатурног императивног програмског језика.

::

   arit_exp ::= NUM
            | ID
            | arit_exp "+" arit_exp
            | arit_exp "*" arit_exp
            | "(" arit_exp ")"

   bool_exp ::= BOOL_CONST
            | arit_exp "<" arit_exp
            | NOT bool_exp
            | bool_exp AND bool_exp

   block ::=  "{" "}"
            | "{" stmt "}"

   stmt ::= block
            | stmt stmt
            | ID "=" arit_exp
            | IF "(" bool_exp ")" block ELSE block
            | WHILE "(" bool_exp ")" block

   program ::= stmt

Нетерминал ``arit_exp`` описује аритметичке изразе, ``bool_exp``
логичке изразе, ``stmt`` наредбе, ``block`` блокове наредби ограђене
витичастим заградама, а ``prog`` програм који се састоји од једне
наредбе (која може бити и блок). Постоје три врсте наредби (наредба
доделе, наредба гранања IF-ELSE и петља WHILE). Покушај да напишеш
неколико програма који су у складу са овом граматиком.
   
